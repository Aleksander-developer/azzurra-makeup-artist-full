# cloudbuild.yaml (nella radice del repository azzurra-makeup-artist-full)

steps:
# 1. Build dell'immagine Docker del Backend (rimane invariato)
- name: 'gcr.io/cloud-builders/docker'
  id: 'build-backend'
  args:
  - 'build'
  - '-t'
  - 'europe-west1-docker.pkg.dev/${PROJECT_ID}/azzurra-backend-repo/azzurra-makeup-artist-backend'
  - 'azzurra-makeup-artist-backend/'
  dir: '.'

# 2. Deploy del Backend su Cloud Run (rimane invariato)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'deploy-backend'
  entrypoint: gcloud
  args:
  - 'run'
  - 'deploy'
  - 'azzurra-backend'
  - '--image'
  - 'europe-west1-docker.pkg.dev/${PROJECT_ID}/azzurra-backend-repo/azzurra-makeup-artist-backend'
  - '--platform'
  - 'managed'
  - '--region'
  - 'europe-west1'
  - '--no-allow-unauthenticated'
  - '--port'
  - '8080'
  - '--set-env-vars'
  - 'MONGO_URI=${_MONGO_URI},EMAIL_USER=${_EMAIL_USER},EMAIL_PASS=${_EMAIL_PASS},EMAIL_DESTINATION=${_EMAIL_DESTINATION},SITE_NAME=${_SITE_NAME},CLOUDINARY_CLOUD_NAME=${_CLOUDINARY_CLOUD_NAME},CLOUDINARY_API_KEY=${_CLOUDINARY_API_KEY},CLOUDINARY_API_SECRET=${_CLOUDINARY_API_SECRET},API_KEY=${_BACKEND_API_KEY}'
  - '--project'
  - '${PROJECT_ID}'

# Rimosso: 3. Build dell'immagine Docker del Frontend (usiamo Buildpacks invece)
# Rimosso: 3.5. Push esplicito dell'immagine Docker del Frontend

# 4. Deploy del Frontend su Cloud Run usando Buildpacks
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'deploy-frontend'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'azzurra-frontend'
    - '--source' # <-- CAMBIATO: Punti alla cartella sorgente del frontend
    - 'azzurra-makeup-artist-fe/' # <-- La cartella del tuo progetto Angular
    - '--platform'
    - 'managed'
    - '--region'
    - 'europe-west1'
    - '--allow-unauthenticated'
    - '--port'
    - '8080' # Buildpacks rileveranno o useranno questa porta per Node.js
    - '--timeout'
    - '300s' # Importante mantenere un timeout sufficiente per SSR
    - '--project'
    - '${PROJECT_ID}'
    # Variabili d'ambiente per Buildpacks (spesso necessarie per SSR)
    env:
      # Indica a Buildpacks di eseguire prima lo script 'build:ssr'
      # e poi lo script 'serve' o 'start' per avviare il server.
      # Assicurati che il tuo package.json abbia uno script 'start' o 'serve'
      # che avvia il tuo server Node.js compilato.
      # Ad esempio: "start": "node dist/azzurra-makeup-artist-fe/server/main.js"
      - 'GOOGLE_NODE_RUN_SCRIPTS=build:ssr,serve:ssr' # <-- Questo è CRUCIALE per SSR
                                                      # Utilizza il tuo "serve:ssr" script
                                                      # definito nel package.json

# Definisce le immagini che verranno create e salvate in Artifact Registry
# Rimuovi l'immagine del frontend da qui, Buildpacks la gestirà automaticamente
images:
- 'europe-west1-docker.pkg.dev/${PROJECT_ID}/azzurra-backend-repo/azzurra-makeup-artist-backend'
# - 'europe-west1-docker.pkg.dev/${PROJECT_ID}/azzurra-frontend-repo/azzurra-makeup-artist-frontend' # Rimosso/commentato

# ... (rest of substitutions and options)